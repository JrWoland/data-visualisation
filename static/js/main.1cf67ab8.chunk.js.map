{"version":3,"sources":["components/population/Population.js","components/currency/Currency.js","components/populationmixed/Population-mixed.js","components/geomap/Geomap.js","components/cities/Cities.js","App.js","serviceWorker.js","index.js"],"names":["Population","props","dataToDisplay","undefined","data","populationDataPL","x","y","className","margin","top","right","bottom","left","xScale","type","yScale","stacked","min","max","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","enablePoints","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","Currency","currencyData","sort","a","b","by","keys","indexBy","pixelRatio","padding","innerPadding","minValue","maxValue","groupMode","layout","reverse","colorBy","borderWidth","borderColor","modifiers","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","isInteractive","numberOfCountries","numberOfCountriesIndependent","numberOfCountriesWithEURCurrency","PopulationMixed","populationDataARB","populationDataUSA","populationDataEUU","enableSlices","Geomap","populationDataWorld","features","countries","domain","unknownColor","label","valueFormat","projectionScale","projectionTranslation","projectionRotation","enableGraticule","graticuleLineColor","itemTextColor","Cities","cities","labelFormat","pathPopulation","pathCountryCodes","pathCities","prefix","App","state","getData","fetch","then","res","json","setState","parsePopulationData","parseWorlGeoPopulation","catch","err","console","log","parseCurrencyData","parseNumbersOfCities","namesOfCountries","countriesJSON","map","item","numbersOfCities","forEach","country","number","filter","push","length","year","populationData","parsedData","element","Value","countryCode","Year","currencyFilter","currency","countCurrency","key","curr","hasOwnProperty","currencyCode","componentDidMount","this","sortBy","sortChartBy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cf67ab8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ResponsiveLine } from '@nivo/line';\r\nimport './Population.css'\r\n\r\nconst Population = (props) => {\r\n\r\n    let dataToDisplay = [\r\n        {\r\n            \"id\": \"Poland\",\r\n            \"color\": \"hsl(67, 70%, 50%)\",\r\n            \"data\": props.data.populationDataPL === undefined ? [{ x: 0, y: 0 }] : props.data.populationDataPL\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div className='container'>\r\n            <p className='title'>Population in Poland 1960-2016</p>\r\n            <ResponsiveLine\r\n                data={dataToDisplay}\r\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n                xScale={{ type: 'point' }}\r\n                yScale={{ type: 'linear', stacked: true, min: 'auto', max: 'auto' }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: -70,\r\n                    legend: 'year',\r\n                    legendOffset: 40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'population (mln)',\r\n                    legendOffset: -40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                colors={{ scheme: 'nivo' }}\r\n                enablePoints={false}\r\n                pointSize={10}\r\n                pointColor={{ theme: 'background' }}\r\n                pointBorderWidth={2}\r\n                pointBorderColor={{ from: 'serieColor' }}\r\n                pointLabel=\"y\"\r\n                pointLabelYOffset={-12}\r\n                useMesh={true}\r\n                legends={[\r\n                    {\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 100,\r\n                        translateY: 0,\r\n                        itemsSpacing: 0,\r\n                        itemDirection: 'left-to-right',\r\n                        itemWidth: 80,\r\n                        itemHeight: 20,\r\n                        itemOpacity: 0.75,\r\n                        symbolSize: 12,\r\n                        symbolShape: 'circle',\r\n                        symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Population;","import React from 'react';\r\nimport { ResponsiveBarCanvas } from '@nivo/bar';\r\nimport './Currency.css'\r\n\r\nconst Currency = (props) => {\r\n  return (\r\n    <>\r\n      <div className='container currency'>\r\n        <p className='title'>The number of countries using a given currency</p>\r\n        <ResponsiveBarCanvas\r\n          data={props.data.currencyData.sort((a, b, by = 'currency') => (a[by] > b[by]) ? 1 : ((b[by] > a[by]) ? -1 : 0))} //sort by currency\r\n          keys={['currencyCode', 'currency']}\r\n          indexBy=\"currencyCode\"\r\n          margin={{ top: 50, right: 60, bottom: 50, left: 60 }}\r\n          pixelRatio={1}\r\n          padding={0.15}\r\n          innerPadding={0}\r\n          minValue=\"auto\"\r\n          maxValue=\"auto\"\r\n          groupMode=\"stacked\"\r\n          layout=\"horizontal\"\r\n          reverse={false}\r\n          colors={{ scheme: 'accent' }}\r\n          colorBy=\"id\"\r\n          borderWidth={0}\r\n          borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n          axisTop={{ tickSize: 0, tickPadding: 0, tickRotation: 0, legend: '', legendOffset: -20 }}\r\n          axisRight={null}\r\n          axisBottom={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'number of countries',\r\n            legendPosition: 'middle',\r\n            legendOffset: 36\r\n          }}\r\n          axisLeft={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'currency',\r\n            legendPosition: 'middle',\r\n            legendOffset: -40\r\n          }}\r\n          enableGridX={true}\r\n          enableGridY={false}\r\n          enableLabel={true}\r\n          labelSkipWidth={12}\r\n          labelSkipHeight={12}\r\n          labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n          isInteractive={true}\r\n        />\r\n      </div >\r\n      <div className=\"container summary\">\r\n        <h2>Summary</h2>\r\n        <p>Number of countries: {props.data.numberOfCountries} (independent: {props.data.numberOfCountriesIndependent})</p>\r\n        <p>Number of countries with EUR currency: {props.data.numberOfCountriesWithEURCurrency}</p>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Currency;","import React from 'react';\r\nimport { ResponsiveLine } from '@nivo/line';\r\nimport './Population-mixed.css'\r\n\r\nconst PopulationMixed = (props) => {\r\n\r\n    let dataToDisplay = [\r\n        {\r\n            \"id\": \"Arab World\",\r\n            \"color\": \"hsl(183, 70%, 50%)\",\r\n            \"data\": props.data.populationDataARB === undefined ? [{ x: 0, y: 0 }] : props.data.populationDataARB\r\n        },\r\n        {\r\n            \"id\": \"USA\",\r\n            \"color\": \"hsl(67, 70%, 50%)\",\r\n            \"data\": props.data.populationDataUSA === undefined ? [{ x: 0, y: 0 }] : props.data.populationDataUSA\r\n        },\r\n        {\r\n            \"id\": \"Europe\",\r\n            \"color\": \"hsl(127, 70%, 50%)\",\r\n            \"data\": props.data.populationDataEUU === undefined ? [{ x: 0, y: 0 }] : props.data.populationDataEUU\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div className='container'>\r\n            <p className='title'>Population USA, Europe and Arab World 1960-2016</p>\r\n            <ResponsiveLine\r\n                data={dataToDisplay}\r\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n                xScale={{ type: 'point' }}\r\n                yScale={{ type: 'linear', stacked: false, min: 'auto', max: 'auto' }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: -70,\r\n                    legend: 'year',\r\n                    legendOffset: 40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'population (mln)',\r\n                    legendOffset: -40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                colors={{ scheme: 'nivo' }}\r\n                enablePoints={false}\r\n                pointSize={10}\r\n                pointColor={{ theme: 'background' }}\r\n                pointBorderWidth={2}\r\n                pointBorderColor={{ from: 'serieColor' }}\r\n                pointLabel=\"y\"\r\n                pointLabelYOffset={-12}\r\n                enableSlices=\"x\"\r\n                useMesh={true}\r\n                legends={[\r\n                    {\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 100,\r\n                        translateY: 0,\r\n                        itemsSpacing: 0,\r\n                        itemDirection: 'left-to-right',\r\n                        itemWidth: 80,\r\n                        itemHeight: 20,\r\n                        itemOpacity: 0.75,\r\n                        symbolSize: 12,\r\n                        symbolShape: 'circle',\r\n                        symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopulationMixed;","import React from 'react'\r\nimport './Geomap.css'\r\nimport { ResponsiveChoroplethCanvas  } from '@nivo/geo'\r\nimport countries from './countries.json'\r\n\r\nconst Geomap = (props) => {\r\n    return(\r\n    <div className=\"container geo\">\r\n        <p className='title'>World Population 2016</p>\r\n        <ResponsiveChoroplethCanvas \r\n        data={props.data.populationDataWorld}\r\n        features={countries.features}\r\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n        colors=\"YlGn\"\r\n        domain={[ 0, 200000000 ]}\r\n        unknownColor=\"#666666\"\r\n        label=\"properties.name\"\r\n        valueFormat=\".3s\"\r\n        projectionScale={110}\r\n        projectionTranslation={[ 0.5, 0.6 ]}\r\n        projectionRotation={[ 0, 0, 0 ]}\r\n        enableGraticule={true}\r\n        graticuleLineColor=\"#dddddd\"\r\n        borderWidth={0.5}\r\n        borderColor=\"#152538\"\r\n        legends={[\r\n            {\r\n                anchor: 'bottom-left',\r\n                direction: 'column',\r\n                justify: true,\r\n                translateX: 20,\r\n                translateY: -100,\r\n                itemsSpacing: 0,\r\n                itemWidth: 94,\r\n                itemHeight: 18,\r\n                itemDirection: 'left-to-right',\r\n                itemTextColor: '#444444',\r\n                itemOpacity: 0.85,\r\n                symbolSize: 18,\r\n                effects: [\r\n                    {\r\n                        on: 'hover',\r\n                        style: {\r\n                            itemTextColor: '#000000',\r\n                            itemOpacity: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]}\r\n    />\r\n     </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Geomap","import React from 'react';\r\nimport { ResponsiveBarCanvas } from '@nivo/bar';\r\nimport './Cities.css'\r\n\r\nconst Cities = (props) => {\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n        <p className='title'>Cities in SA Countries</p>\r\n        <ResponsiveBarCanvas\r\n          data={props.data.cities}\r\n          keys={['country', 'cities']}\r\n          indexBy=\"country\"\r\n          margin={{ top: 50, right: 60, bottom: 130, left: 60 }}\r\n          pixelRatio={1}\r\n          padding={0.15}\r\n          innerPadding={0}\r\n          minValue=\"auto\"\r\n          labelFormat='x'\r\n          maxValue=\"auto\"\r\n          groupMode=\"stacked\"\r\n          layout=\"vertical\"\r\n          reverse={false}\r\n          colors={{ scheme: 'accent' }}\r\n          colorBy=\"y\"\r\n          borderWidth={0}\r\n          borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n          axisTop={null}\r\n          axisRight={null}\r\n          axisBottom={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: -30,\r\n            legend: 'number of cities',\r\n            legendPosition: 'middle',\r\n            legendOffset: 56\r\n          }}\r\n          axisLeft={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'Country',\r\n            legendPosition: 'middle',\r\n            legendOffset: -40\r\n          }}\r\n          enableGridX={true}\r\n          enableGridY={true}\r\n          enableLabel={true}\r\n          labelSkipWidth={12}\r\n          labelSkipHeight={12}\r\n          labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n          isInteractive={true}\r\n        />\r\n      </div >\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Cities;","import React from 'react';\r\nimport './App.css';\r\nimport countriesJSON from './components/cities/countriesSouthAmerica.json'\r\nimport Population from './components/population/Population';\r\nimport Currency from './components/currency/Currency';\r\nimport PopulationMixed from './components/populationmixed/Population-mixed';\r\nimport Geomap from './components/geomap/Geomap';\r\nimport Cities from './components/cities/Cities';\r\n\r\nconst pathPopulation = 'https://datahub.io/core/population/r/population.json';\r\nconst pathCountryCodes = 'https://datahub.io/core/country-codes/r/country-codes.json';\r\nconst pathCities = 'https://datahub.io/core/world-cities/r/world-cities.json';\r\nconst prefix = \"https://cors-anywhere.herokuapp.com/\";\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    populationDataWorld: [],\r\n    populationDataPL: [],\r\n    populationDataUSA: [],\r\n    populationDataEUU: [], //Euro area\r\n    populationDataARB: [], //Arab world\r\n    currencyData: [],\r\n    numberOfCountries: 0,\r\n    numberOfCountriesIndependent: 0,\r\n    numberOfCountriesWithEURCurrency: 0,\r\n    cities: []\r\n  }\r\n\r\n  getData = () => {\r\n    fetch(prefix + pathPopulation)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({\r\n          populationDataPL: this.parsePopulationData(data, 'POL'),\r\n          populationDataUSA: this.parsePopulationData(data, 'USA'),\r\n          populationDataEUU: this.parsePopulationData(data, 'EUU'),\r\n          populationDataARB: this.parsePopulationData(data, 'ARB'),\r\n          populationDataWorld: this.parseWorlGeoPopulation(data)\r\n        })\r\n      })\r\n      .catch(err => console.log(err));\r\n\r\n    fetch(prefix + pathCountryCodes)\r\n      .then(res => res.json())\r\n      .then(data => this.parseCurrencyData(data))\r\n      .catch(err => console.log(err))\r\n\r\n    fetch(prefix + pathCities)\r\n      .then(res => res.json())\r\n      .then(data => this.setState({ cities: this.parseNumbersOfCities(data) }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  parseNumbersOfCities = (data) => {\r\n    let namesOfCountries = countriesJSON.map(item => item = item[\"CLDR display name\"]);\r\n    let numbersOfCities = [];\r\n    namesOfCountries.forEach(country => {\r\n      let number = data.filter(item => item['country'] === country)\r\n      numbersOfCities.push({\r\n        country: country,\r\n        cities: number.length\r\n      })\r\n    });\r\n    return numbersOfCities;\r\n  }\r\n\r\n  parseWorlGeoPopulation = (data, year = 2016) => {\r\n    const populationData = data.filter(item => item['Year'] === year);\r\n    const parsedData = [];\r\n\r\n    populationData.forEach(element => {\r\n      parsedData.push({\r\n        'id': element['Country Code'],\r\n        'value': element.Value\r\n      })\r\n    });\r\n\r\n    return parsedData;\r\n  }\r\n\r\n  parsePopulationData = (data, countryCode) => {\r\n    const populationData = data.filter(item => item['Country Code'] === countryCode);\r\n    const parsedData = [];\r\n\r\n    populationData.forEach(element => {\r\n      parsedData.push({\r\n        'x': element.Year,\r\n        'y': element.Value / 1000000\r\n      })\r\n    });\r\n    return parsedData;\r\n  }\r\n\r\n  parseCurrencyData = (data) => {\r\n    const currencyFilter = data.filter(country => country['ISO4217-currency_alphabetic_code'] !== null);\r\n    const currency = []\r\n    const countCurrency = {};\r\n    const parsedData = [];\r\n\r\n    currencyFilter.forEach(country => {\r\n      currency.push(country['ISO4217-currency_alphabetic_code'])\r\n    });\r\n\r\n    currency.forEach(curr => {\r\n      if (!countCurrency.hasOwnProperty(curr)) {\r\n        countCurrency[curr] = 0;\r\n      }\r\n      countCurrency[curr]++;\r\n    })\r\n\r\n    for (const key in countCurrency) {\r\n      if (countCurrency.hasOwnProperty(key)) {\r\n        if (countCurrency[key] === null) {\r\n          return\r\n        } else {\r\n          parsedData.push({ currencyCode: key, currency: countCurrency[key] });\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      currencyData: parsedData,\r\n      numberOfCountries: data.filter(country => country['CLDR display name']).length,\r\n      numberOfCountriesIndependent: data.filter(country => country['is_independent'] === 'Yes').length,\r\n      numberOfCountriesWithEURCurrency: currencyFilter.filter(country => country['ISO4217-currency_alphabetic_code'] === 'EUR').length\r\n    })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <header><h1>Data Dashboard</h1></header>\r\n        <div className=\"App\">\r\n          <Population data={this.state} />\r\n          <Currency data={this.state} sortBy={this.state.sortChartBy} />\r\n          <PopulationMixed data={this.state} />\r\n          <Cities data={this.state} />\r\n          <Geomap data={this.state} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}